#compdef ausearch
# zsh completion for the ausearch command line application
# Copyright Â© 2021 Henrik Lindgren
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.


_arguments -s '(-e --exit)'{-e,--exit}'[Exit code or errno search based on syscall exit code]:exit-code-or-errno:->exitcode'\
  '(-ge --gid-effective)'{-ge,--gid-effective}'[Search based on Effective]:effective:->groupid'\
  '(-gi --gid)'{-gi,--gid}'[Search based on group id]:Group:->groupid'\
  '(-ga --gid-all)'{-ga,--gid-all}'[effective group ID or group ID matching given group ID]:all:->groupid'\
  '(-hn --host)'{-hn,--host}'[search based on remote host name]:Host:_hosts'\
  '(-if --input)'{-if,--input}'[Input File name use this file instead of current log]:input file:_files'\
  '(-i --interpret)'{-i,--interpret}'[Interpret numeric entities into text]'\
  '(--just-one -l --line-buffered)'{-l,--line-buffered}'[Flush output on every line]'\
  '(-n --node)'{-n,--node}'[Node name search based on machines name]:Node:_hosts'\
  '(-p --pid)'{-p,--pid}'[search based on process id]:pid:'\
  '(--extra-* -i --format -r --raw)'{-r,--raw}'[output is completely unformatted]'\
  '(-se --context)'{-se,--context}'[SE Linux context search based on either subject or]:SE Linux Context:->scontext'\
  '(-sv --success)'{-sv,--success}'[Success Value search based on syscall or event]:Success:( yes no )'\
  '(-su --subject)'{-su,--subject}'[Search for event with scontext subject matching string]:SE:->scontext'\
  '(-sc --syscall)'{-sc,--syscall}'[Search for an event matching given syscall]:syscall:->syscall'\
  '(-m --message)'{-m,--message}'[Search for event matching message type. also known as record types]:record type:->message'\
  '(-tm --terminal)'{-tm,--terminal}'[TerMinal search based on terminal]:terminal:->terminal'\
  '(-ue --uid-effective)'{-ue,--uid-effective}'[search based on Effective]:uid effective:->userid'\
  '(-ui --uid)'{-ui,--uid}'[search based on user id]:uid:->userid'\
  '(-ts --start)'{-ts,--start}'[start time]:starttime:->day:hour\:minute:->daytime'\
  '(-te --end)'{-te,--end}'[end time]:end:->day:hour\:minute:->daytime'\
  '(-uu --uuid)'{-uu,--uuid}'[search for events related to virtual guest uuid]:guest:->userid'\
  '(-vm --vm-name)'{-vm,--vm-name}'[machine with name]:guest:_hosts'\
  '(-x --executable)'{-x,--executable}'[search based on executable name]:executable:->executable'\
  '(-a --event)'{-a,--event}'[search for event by event id]:event id:'\
  '--arch[Search based on CPU architecture]:CPU:(b64 b32)'\
  '--checkpoint[Checkpoint file search from last complete event]:checkpoint file:_files'\
  '( -r --raw -i --format )--format[Raw default interpret csv text results format option]:format:(raw default interpret csv text)'\
  '( -r --raw -i )--extra-keys[for csv, add a final column with key information]'\
  '( -r --raw -i )--extra-labels[for format mode csv, option will add columns of information]'\
  '( -r --raw -i )--extra-time[for csv,add columns about broken down time to make subsetting easier]'\
  '( -r --raw -i )--extra-obj2[add columns of information about a second object]'\
  '(-k --key)'{-k,--key}'[Search for an event based on given key string]:key:->key'\
  '(-c --comm)'{-c,--comm}'[Search for an event based on given comm name. comm name is executables name]:comm:->executable'\
  '(-l)--just-one[Emit just one event]'\
  '--session[Login session id search based on login session id]:login id:->loginid'\
  '(-w --word)'{-w,--word}'[Category of matches include\: filename, hostname, terminal, keys, and SE Linux context]:word:'\
  '--escape[If the output is escaped]:escape type:(raw shell shell_quote tty)' && return 0

case $state in
  loginid)
      local loginid=( $( _call_program loginid ausearch --raw | grep -oP -- 'exit=\K[0-9]+' ) )
      compadd -x loginid -e -a loginid
      ;;
  exitcode)
      local code=( $( _call_program ecode ausearch --raw | grep -oP -- 'exit=\K[0-9]+' ) )
      compadd -x 'exitcode' -e -a code
      ;;
  terminal)
     # TODO: add caching for parameters fetched by ausearch
    local term=( $( _call_program terminal ausearch -i 2>/dev/null | grep -oP "terminal=\K[^?' ]+" ) )
    compadd -x tty -e -a term
    ;;
  key)
    local keys=( $(_call_program auctl auditctl -l 2>/dev/null | grep -oP '(key=\K[^ ]+)|(\s+-k\K\s+[^ ]+)' ) )
      compadd -x key -e -a keys
      return 0
  ;;
  day)
      _alternative 'arguments:special time:( checkpoint\:file now recent this-month this-week this-year today week-ago yesterday boot )'\
        'date:date:_dates'
        return 0
    ;;
  daytime)
      local daytime=( {0..24}\:{0..60} )
      _multi_parts -n : daytime
      return 0
    ;;
  groupid)
    local groupids=( ${${(f)"$(_call_program groupid getent group 2>/dev/null)"//:/ }/ /:} )
    _describe 'groupids' groupids
    ;;
  userid)
    userids=( ${${(f)"$(_call_program passwd getent passwd 2>/dev/null)"//:/ }/ /:} )
    _describe 'userids' userids
    ;;
  executable)
      # TODO: test passing commands array directly to compadd
      local executables=( ${${(f)"$(print -rC1 -- ${(ko)commands} 2>/dev/null)"}[@]} )
      compadd -x executable -e -a executables
    ;;
  syscall)
    local syscalls=( ${${(f)${"$(_call_program syscall ausyscall --dump 2>/dev/null | tr '	' ":" )"}}} )
    shift syscalls
    _describe syscall syscalls
    ;;
  scontext)
    #local scontexts=( $(_call_program fcontext semanage fcontext -l 2>/dev/null | awk '/^\// && $2!="=" {print $4":"$1,$2,$3}' ) )
    #shift scontexts
    local scontexts=( $(_call_program fcontext ausearch --raw 2>/dev/null | grep -oP 'subj=\K[^ ]+' ) )
    #_multi_parts : scontexts
    compadd -x scontexts -e -a scontexts
    ;;
  message)
    local messages=( ${(@s/ /)${"$(_call_program ausearchm ausearch -m 2>/dev/stdout 1>/dev/null )"##*: }} )
    _values -s , message ${messages[@]}
    ;;
esac

# vim: set ts=2 sw=2 tw=0 expandtab foldenable foldmethod=syntax foldclose=all :
