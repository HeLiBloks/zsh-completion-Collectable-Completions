#!/usr/bin/gawk -f
# dynamic completion generator for the Z [S]hell
# Copyright Â© 2019 Henrik Lindgren
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Invoke the script like this:
# {executable} --help | compgenz [name of completion function to generate] > _ToBeCompletionFile

BEGIN {
    DescStart=0
    if (ARGV[1]!="") {
        name=ARGV[1]
        ARGV[1]=""
    }
};

# create options inside braces
# SOpt: short option
# LOpt: long option
# returns: string formated alike "(-s --longopt)" or "(1 : -)"
function classify_brace(    SOpt,    LOpt){
    if (LOpt ~ /--?help/ || SOpt ~ /-help/ || LOpt ~ /--?version/) {
        return "(: - 1)"
    } else if (SOpt !="" && LOpt !="") {
        return sprintf("(%s %s)", SOpt, LOpt)
    } else {  return "" }
}

# delete arrays scoped to current line and
# get next line of input
# str: not used
function skip(    str){
    delete LongOption
    delete ShortOption
    delete Argument
    # precede with next record
    next
}

# remove zsh syntax breaking chars from description
# description: string
function cleanDescr(    desc){
    # dont break prinf(), remove % signs
    gsub(/[%]/,"percent", desc);
    # TODO: regexes in the description breaks this script
    gsub(/(\s[tT]he\s?)|[[;:'*><~|]|[])(]/," ",desc)
    gsub(/\s{2,}/," ",desc)
    gsub(/[\s,.]$/,"",desc)
    return desc
}


# string: string to classify
# return: string. zsh-function to add to action part of completion option
function classify(    string){
    IGNORECASE=1
    # TODO: implement with loop over associative array instead
    if (Argument[0]=="") {
        return ""
    } else if (Argument[0] ~ /date/){
        return "_dates"
    } else if (Argument[0] ~ /unixtime/){
        return "_dates -f %s"
    } else if (Argument[0] ~ /files?/){
        return "_files"
    } else if (Argument[0] ~ /dirs?|paths?/){
        return "_files -/"
    } else if (Argument[0] ~ /interfaces?/){
        return "_net_interfaces"
    } else if (Argument[0] ~ /urls?|hosts?/ || LongOption[0] ~ /url|hosts?/){
        return "_hosts"
    } else if (Argument[0] ~ /displays?/){
        return "_x_display"
    }
    # split(string,strings,/\s+|[+.,|]/)
    # for (x in strings) {
    # switch (x) {
        # case /--file/:
            # return "_files"
            # break
        # case /--(dir|path)/:
            # return "_path_files"
            # break
        # default:
            # return ""
            # break
        # }
    # }
}

# try to figure out Name of binary that produced input string
/^\s*[Uu]sage[:]?/{
    # skip if name already set
    if (name!="") {
        next
    } else if ($2!="") {
        name=$2
        next
    } else {
        getline
        name=$1
    }
}

/^\s{2,}--?/,!/^(\s*$)|(^\s+[-])/ {

    # determine indent length
    match($0,/^\s+/);
    IndentLen=RLENGTH
    # find start of options
    # OptStart=match($0,/^\s{2,}--?/)

    # trim preceding whitespace
    sub(/^\s+/,"",$0);

    FallbackCopy=$0

    # find start of description
    # it {sh|c}ould look like "-d  description"
    DescStart=match($0,/(\s{2,})|\t/)+RLENGTH;
    # Desc: description beginning after "match($0,/\s{2,}/)+RLENGTH"
    Desc=cleanDescr(substr($0,DescStart));

        # print "DescStart:",DescStart, "ShortOption:",ShortOption[0],"LongOption:",LongOption[0],"Desc:",Desc,"Argument:",Argument[0],"Rest:",$0
    if (Desc = -1) {
        # description probably is below option, so fetch next line
        getline Desc
        # FallbackCopy=Desc
    if (Desc ~ /^\s{2,}--?/) {
        # print "Desc:",Desc
        # this line starts with an option fallback
        $0=Desc
        sub(/^\s+/,"",$0);
        DescStart=match($0,/\s{2,}/)+RLENGTH;
        Desc=substr($0,DescStart)
    }
    }

    sub(/^\s+/,"",Desc);
    Desc=cleanDescr(Desc);

    # remove Desc from $0
    # $0=substr($0,0,DescStart-1)
    sub(Desc,"",$0)

    # add long option to array LongOption
    if (match($0,/(-{2}[a-z0-9A-Z][a-z0-9A-Z_-]?+)/, LongOption)){
        # trim longoption from $0 TODO: escape regex chars in long option
        gsub(LongOption[0],"",$0)
    }

    # add short option to array ShortOption
    if (match($0,/(-{1}[a-z0-9A-Z][a-z0-9A-Z_-]?+)/, ShortOption)){
            # trim shortoption from $0
            gsub(ShortOption[0],"",$0)
    }

    # if $0 still contains a word add it to Argument
    if (match($0,/[=]?[a-zA-Z0-9]+/, Argument)){
            gsub(Argument[0],"",$0)
            gsub(/[=]/,"",Argument[0])
            Argument[0]=sprintf(":%s:",Argument[0])
    }
    # add options to ComplText[] array
    # printf() row of completion function
    if (ShortOption[0]=="" && LongOption[0]=="") {
        skip()
    } else if (ShortOption[0]!="" && LongOption[0]!="") {
        Opt=sprintf("{%s,%s}",ShortOption[0], LongOption[0])
        Brace=classify_brace(ShortOption[0], LongOption[0])
        sub(/^--/, "", LongOption[0])
        ComplText[LongOption[0]]=sprintf("'%s'%s'[%s]%s%s'", Brace, Opt, Desc, Argument[0], classify(FallbackCopy))
        skip()
    } else if ( ShortOption[0]=="" || LongOption[0]=="" ){
       Brace=classify_brace(ShortOption[0],LongOption[0])
       sOption=sprintf("%s%s",ShortOption[0],LongOption[0])
       sub(/^--/,"",LongOption[0])
       sub(/^-/,"",ShortOption[0])
       ComplText[LongOption[0] ShortOption[0]]=sprintf( "'%s%s[%s]%s%s'", Brace, sOption, Desc, Argument[0], classify( FallbackCopy))
       skip()
   }
    # Debug
    # print "DescStart:",DescStart, "ShortOption:",ShortOption[0],"LongOption:",LongOption[0],"Desc:",Desc,"Argument:",Argument[0],"Rest:",$0
}

END {
    # print completion script to stdout
    print "#compdef",name
    printf "\n\n_arguments -s"
    IGNORECASE=1
    # Sort array
    asort(ComplText)
    for (opt in ComplText) {
        gsub(/^''/,"",ComplText[opt])
        # check if number of ticks are balanced
        if (gsub(/'/,"'",ComplText[opt]) % 2 != 0) {
            print  "ERROR: line:",NR,"unbalanced tick:",ComplText[opt] > /dev/stderr
            continue
        }
        printf "  %s\\\n",ComplText[opt]
    }
    print "  '*:file:_files' && return 0"
}

#  vim: set ts=4 sw=4 tw=0 expandtab foldenable foldmethod=marker foldmarker={,} foldclose=all foldlevel=1 :
